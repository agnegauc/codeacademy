const mysql = require("mysql2/promise");
const express = require("express");
const app = express();

require("./config"); // instead of require("dotenv").config();

const SERVER_PORT = +process.env.SERVER_PORT || 8_080;

const MYSQL_CONFIG = {
  host: process.env.host,
  user: process.env.user,
  password: process.env.password,
  database: process.env.database,
  port: +process.env.port,
};

app.use(express.json());

// via MySQL Workbench:

// CREATE table cars (id int NOT NULL AUTO_INCREMENT, title varchar(35), image varchar(200), price decimal (8, 2), numberplates varchar(6),PRIMARY KEY (id))
// INSERT INTO cars (title,image,price,numberplates) VALUES ('BMW i8', 'https://www.bmwusa.com/content/dam/bmwusa/common/fma/new-secondary-fmas-assets/non-cookied/secondary-fma-4/mobile/BMW-HP-X5-Secondary-FMA-Mobile.jpg',222222,'ABC123');

app.get("/cars/:id?", async (req, res) => {
  const id = req.params?.id;
  const idToNumber = +req.params.id;
  const query = idToNumber
    ? `SELECT * FROM cars WHERE id= ${idToNumber}`
    : `SELECT * FROM cars`;

  if (
    (typeof id !== "undefined" &&
      (typeof idToNumber !== "number" || Number.isNaN(idToNumber))) ||
    idToNumber <= 0
  ) {
    return res
      .status(400)
      .send({
        error: `Incorrect id provided. Please try again.`,
      })
      .end();
  }

  try {
    const con = await mysql.createConnection(MYSQL_CONFIG);

    const result = await con.execute(query);

    await con.end();

    res.send(result[0]).end();
  } catch (err) {
    res.send(err).end();
    return console.error(err);
  }
});

app.post("/car", async (req, res) => {
  const { title, image, price, numberplates } = req.body;

  const sendBadReqResponse = (message) => {
    res
      .status(400)
      .send({
        error: message,
      })
      .end();
  }; // to avoid repeating myself when writing errors

  if (!title || !image || !price || !numberplates) {
    return sendBadReqResponse(
      "Title, image, price and / or numberplate not provided."
    );
  } // checking if all parameters are submitted before cleaning them

  const cleanTitle = mysql.escape(req.body.title?.trim());
  const cleanImage = mysql.escape(req.body.image?.trim());
  const cleanPrice = +mysql.escape(req.body.price).replaceAll("'", "");
  const cleanNumberplates = mysql
    .escape(req.body.numberplates.toUpperCase().trim())
    .replaceAll("'", "");

  if (
    typeof cleanTitle !== "string" ||
    typeof cleanImage !== "string" ||
    typeof cleanNumberplates !== "string"
  ) {
    return sendBadReqResponse(
      "Title, image, price and / or numberplate invalid."
    ); // passing the message as a parameter
  }

  if (cleanNumberplates.length !== 6) {
    return sendBadReqResponse(
      "Numberplate is invalid. Please provide 6 symbols."
    );
  }

  if (Number.isNaN(cleanPrice) || typeof cleanPrice !== "number") {
    return sendBadReqResponse(
      `Price ${cleanPrice} is invalid. Please provide a number.`
    );
  }

  const query = `INSERT INTO cars (title, image, price, numberplates) VALUES (${cleanTitle}, ${cleanImage}, ${cleanPrice}, '${cleanNumberplates}')`; // might need ''; mysql.escape adds '' but replaceAll removes them

  try {
    const con = await mysql.createConnection(MYSQL_CONFIG);

    await con.execute(query);

    await con.end();

    res.status(200).send("Inserted successfully.");
  } catch (err) {
    res.status(500).send(err).end();
    return console.error(err);
  }
});

app.delete("/cars/:id", async (req, res) => {
  const id = +mysql.escape(req.params.id.trim()).replaceAll("'", "");
  const query = `DELETE FROM cars WHERE id = ${id}`;

  if (id < 0 || Number.isNaN(id) || typeof id !== "number") {
    return res
      .status(400)
      .send({
        error: `Please provide a valid id.`,
      })
      .end();
  }

  try {
    const con = await mysql.createConnection(MYSQL_CONFIG);
    const idExists = (
      await con.execute(`SELECT * FROM cars WHERE id = ${id}`)
    )[0]; // Checking if id exists. Usually have result[0], for some reason in this case it's better not to put in result

    // The above returns either 0 or 1, hence:
    if (!idExists.length) {
      return res
        .status(404)
        .send({ error: `id ${id} is invalid. Please provide and existing id.` })
        .end();
    }

    await con.execute(query);

    await con.end();

    res.status(202).send("Item has been deleted.").end();
  } catch (err) {
    res.status(500).send(err).end();
    return console.error(err);
  }
});

// SQL PATCH (title of item with id 3) example (generated by Workbench):
// UPDATE `defaultdb`.`cars` SET `title` = 'Audi A8' WHERE (`id` = '3');

app.listen(SERVER_PORT, () =>
  console.info(`Server is running on port ${SERVER_PORT}`)
);
